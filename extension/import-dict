#!/bin/bash
set -e -u -o pipefail
cd "$(dirname "${BASH_SOURCE[0]}")"

if [ "${1-part1}" = part1 ]; then
    {
        sqlite3 <<'EOF'
.mode csv
.import ../data/erofa/DOR-numerique_v1.0.2.csv t
select "Grafie initiale","Grafie modifiée"
from t
where "Grafie initiale" != ''
EOF
    } \
        | tr -d '"' \
        | sed 's/ *([^)]*)//g' \
        | LANG=C sort -u \
        | {
        # The coordonner entry is erroneous. Let our dict generation do the right thing
        #
        # Drop héro and héroïne to avoid removing the h for the meaning of héroique.
        # We then make the error of not removing the h for the drug, but oh well, that
        # seems like a less confusing error to make.
        grep -E -v 'coordonner|^héro\>|^héroïne\>|^héroïq'
        echo sinophone,sinofone # missing
    } \
        | cat > dict.external-sources.gen.csv

    {
        sqlite3 <<'EOF'
.mode csv
create table t(before,after);
.import dict.external-sources.gen.csv t
select replace(replace(before,"œ","oe"),"æ","ae") as rewritten, after
from t
where rewritten != before and rewritten != after
EOF
    } \
        | tr -d '"' \
        | LANG=C sort \
        | cat >> dict.external-sources.gen.csv

    {
        # sqlite doesn't support outer joins, so we do two left joins
        # to combine the wiktionary and lexique+recto/verso data.
        # In a couple of cases, the two dbs don't agree ("absous"
        # is one case), so we just drop these cases.
        # The resulting table includes regular plurals that we could
        # drop, but the table is small so whatever.
        sqlite3 <<'EOF'
.mode csv
.import ../data/lexique/1990.csv l
.import ../data/wiktionnaire/1990.csv w
-- fix errors in wiktionnaire, or in the extraction maybe
update w set post1990 = 'cloitreraient' where pre1990 = 'cloîtreraient';
update w set post1990 = 'surs' where pre1990 = 'sûrs';
select distinct l.ortho,
       case
       when l.type = 1
       then l.post90
       else
         case
         when l.ortho like '%s' or l.ortho like '%x'
         then substring(l.post90,instr(l.post90,'/')+1)
         else substring(l.post90,1,instr(l.post90,'/')-1)
         end
       end as suggested_new
from l
left join w on l.ortho = w.pre1990
where (w.post1990 is null or l.post90 = w.post1990)
and suggested_new <> l.ortho
union all
select distinct w.pre1990,w.post1990
from w
left join l on l.ortho = w.pre1990
where l.ortho is null
and w.pre1990 <> w.post1990
and w.pre1990 = lower(w.pre1990)
order by 1
EOF
    } \
        | tr -d '"' \
        | LANG=C sort \
        | cat >> dict1990.gen.csv
fi

if [ "${1-part2}" = part2 ]; then
    cp --no-preserve=all dict.external-sources.gen.csv dict.gen.csv
    cat ../data/homemade/dict-erofa-ext.csv >> dict.gen.csv

    # Capitalized words in the dict are treated as exceptions, for
    # cases when the capitalized version of the word is almost never the common
    # noun, but is instead a proper noun that we don't want to rewrite
    for w in Pierre Cannes Rennes Vienne Bordeaux Nivelles; do
        echo $w,bug-if-displayed
    done >> dict.gen.csv

    function string_of_file {
        echo -n \"; tr '\n' '/' < $1; echo \";
    }

    {
        echo "const dict_erofa = $(string_of_file dict.gen.csv)"
        echo "const dict_rect1990 = $(string_of_file dict1990.gen.csv)"
    } > dict.js
fi
